name: 'OpenGrep SAST Scanner'
description: 'Run OpenGrep static analysis security testing with configurable rules and outputs'
author: 'maloma7'

branding:
  icon: 'shield'
  color: 'red'

inputs:
  # Core Configuration
  version:
    description: 'OpenGrep version to use'
    required: false
    default: 'v1.10.2'

  config:
    description: 'Rule configuration (auto, path to config file, or inline rules)'
    required: false
    default: 'auto'

  paths:
    description: 'Paths to scan (space-separated)'
    required: false
    default: '.'

  # Output Configuration
  output-format:
    description: 'Output format: json, sarif, text, gitlab-sast, gitlab-secrets, junit-xml, semgrep-json'
    required: false
    default: 'json'

  output-file:
    description: 'Output file path'
    required: false
    default: 'opengrep-results.json'

  # Scanning Options
  severity:
    description: 'Minimum severity level: INFO, WARNING, ERROR'
    required: false
    default: 'INFO'

  exclude:
    description: 'Exclude patterns (space-separated)'
    required: false
    default: ''

  include:
    description: 'Include patterns (space-separated)'
    required: false
    default: ''

  max-target-bytes:
    description: 'Maximum bytes to scan per file'
    required: false
    default: '1000000'

  timeout:
    description: 'Timeout in seconds'
    required: false
    default: '1800'

  # Performance Options
  jobs:
    description: 'Number of parallel jobs (0 = auto-detect)'
    required: false
    default: '0'

  max-memory:
    description: 'Maximum memory in MB (0 = unlimited)'
    required: false
    default: '0'

  # Git-Aware Scanning
  baseline-commit:
    description: 'Git commit to use as baseline for differential scanning'
    required: false
    default: ''

  diff-depth:
    description: 'Git diff depth for changed files scanning'
    required: false
    default: '2'

  # Advanced Options
  enable-metrics:
    description: 'Enable OpenGrep anonymous metrics'
    required: false
    default: 'false'

  verbose:
    description: 'Enable verbose output'
    required: false
    default: 'false'

  no-git-ignore:
    description: 'Ignore .gitignore files'
    required: false
    default: 'false'

  # Security Options
  verify-signature:
    description: 'Verify binary signature using Cosign'
    required: true
    default: 'true'

  # Action Behavior
  fail-on-findings:
    description: 'Fail the action if findings are detected'
    required: false
    default: 'false'

  upload-artifacts:
    description: 'Upload results as GitHub artifacts'
    required: false
    default: 'true'

  artifact-name:
    description: 'Name for uploaded artifact'
    required: false
    default: 'opengrep-results'

outputs:
  results-file:
    description: 'Path to the results file'
    value: ${{ steps.process.outputs.results-file }}

  findings-count:
    description: 'Number of findings detected'
    value: ${{ steps.process.outputs.findings-count }}

  critical-count:
    description: 'Number of critical/high severity findings'
    value: ${{ steps.process.outputs.critical-count }}

  scan-exit-code:
    description: 'OpenGrep scan exit code'
    value: ${{ steps.scan.outputs.scan-exit-code }}

runs:
  using: 'composite'
  steps:
    # Step 1: Validate all inputs
    - name: Validate inputs
      shell: bash
      run: |
        export INPUT_VERSION="${{ inputs.version }}"
        export INPUT_OUTPUT_FORMAT="${{ inputs.output-format }}"
        export INPUT_SEVERITY="${{ inputs.severity }}"
        export INPUT_MAX_TARGET_BYTES="${{ inputs.max-target-bytes }}"
        export INPUT_TIMEOUT="${{ inputs.timeout }}"
        export INPUT_VERIFY_SIGNATURE="${{ inputs.verify-signature }}"
        export INPUT_FAIL_ON_FINDINGS="${{ inputs.fail-on-findings }}"
        export INPUT_UPLOAD_ARTIFACTS="${{ inputs.upload-artifacts }}"
        export INPUT_PATHS="${{ inputs.paths }}"
        export INPUT_OUTPUT_FILE="${{ inputs.output-file }}"

        "${{ github.action_path }}/scripts/validate-inputs.sh"

    # Step 2: Detect platform and architecture
    - name: Detect platform and architecture
      id: platform
      shell: bash
      run: |
        "${{ github.action_path }}/scripts/detect-platform.sh" "${{ runner.arch }}"

    # Step 3: Cache cosign binary (performance optimization)
    - name: Cache cosign binary
      id: cache-cosign
      uses: actions/cache@v4
      if: inputs.verify-signature == 'true'
      with:
        path: /usr/local/bin/cosign
        key: cosign-${{ runner.os }}-${{ steps.platform.outputs.arch }}-v2

    # Step 4: Cache OpenGrep binary
    - name: Cache OpenGrep binary
      id: cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.action_path }}/bin/opengrep
          ${{ github.action_path }}/bin/.verified
        key: opengrep-${{ inputs.version }}-${{ runner.arch }}-v2

    # Step 5: Download and verify OpenGrep binary
    - name: Download OpenGrep binary
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        export BINARY_NAME="${{ steps.platform.outputs.binary-name }}"
        export VERSION="${{ inputs.version }}"
        export ACTION_PATH="${{ github.action_path }}"

        "${{ github.action_path }}/scripts/download-binary.sh"

    # Step 6: Signature verification
    - name: Verify binary signature
      if: inputs.verify-signature == 'true' && (steps.cache.outputs.cache-hit != 'true' || !hashFiles(format('{0}/bin/.verified', github.action_path)))
      shell: bash
      run: |
        export BINARY_NAME="${{ steps.platform.outputs.binary-name }}"
        export VERSION="${{ inputs.version }}"
        export ACTION_PATH="${{ github.action_path }}"
        export ARCH="${{ steps.platform.outputs.arch }}"
        export COSIGN_CACHED="${{ steps.cache-cosign.outputs.cache-hit }}"

        "${{ github.action_path }}/scripts/verify-signature.sh"

    # Step 7: Validate installation
    - name: Validate OpenGrep installation
      shell: bash
      run: |
        export BINARY_PATH="${{ github.action_path }}/bin/opengrep"

        "${{ github.action_path }}/scripts/validate-installation.sh"

    # Step 8: Auto-detect baseline for PR workflows
    - name: Setup baseline for PR
      id: baseline
      if: github.event_name == 'pull_request' && inputs.baseline-commit == ''
      shell: bash
      run: |
        base_sha="${{ github.event.pull_request.base.sha }}"
        echo "baseline-commit=$base_sha" >> $GITHUB_OUTPUT
        echo "::notice::Auto-detected baseline commit for PR: $base_sha"

    # Step 9: Run OpenGrep scan
    - name: Run OpenGrep scan
      id: scan
      shell: bash
      continue-on-error: true
      run: |
        export OPENGREP_BINARY="${{ github.action_path }}/bin/opengrep"
        export INPUT_CONFIG="${{ inputs.config }}"
        export INPUT_OUTPUT_FORMAT="${{ inputs.output-format }}"
        export INPUT_OUTPUT_FILE="${{ inputs.output-file }}"
        export INPUT_SEVERITY="${{ inputs.severity }}"
        export INPUT_EXCLUDE="${{ inputs.exclude }}"
        export INPUT_INCLUDE="${{ inputs.include }}"
        export INPUT_MAX_TARGET_BYTES="${{ inputs.max-target-bytes }}"
        export INPUT_TIMEOUT="${{ inputs.timeout }}"
        export INPUT_JOBS="${{ inputs.jobs }}"
        export INPUT_MAX_MEMORY="${{ inputs.max-memory }}"
        export INPUT_BASELINE_COMMIT="${{ inputs.baseline-commit || steps.baseline.outputs.baseline-commit }}"
        export INPUT_DIFF_DEPTH="${{ inputs.diff-depth }}"
        export INPUT_ENABLE_METRICS="${{ inputs.enable-metrics }}"
        export INPUT_VERBOSE="${{ inputs.verbose }}"
        export INPUT_NO_GIT_IGNORE="${{ inputs.no-git-ignore }}"
        export INPUT_PATHS="${{ inputs.paths }}"

        "${{ github.action_path }}/scripts/run-scan.sh"

    # Step 10: Process results
    - name: Process scan results
      id: process
      shell: bash
      run: |
        "${{ github.action_path }}/scripts/process-results.sh" \
          "${{ inputs.output-file }}" \
          "${{ inputs.output-format }}"

    # Step 11: Handle fail-on-findings
    - name: Check findings threshold
      if: inputs.fail-on-findings == 'true'
      shell: bash
      run: |
        findings_count="${{ steps.process.outputs.findings-count }}"

        if [ "$findings_count" != "unknown" ] && [ "$findings_count" != "0" ] && [ "$findings_count" -gt 0 ]; then
          echo "::error::Security findings detected: $findings_count findings"
          echo "::error::Critical/High severity: ${{ steps.process.outputs.critical-count }}"
          exit 1
        fi

    # Step 12: Upload artifacts
    - name: Upload results artifact
      if: inputs.upload-artifacts == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.output-file }}
        retention-days: 30
        if-no-files-found: warn
